//program that can track 8 activities and timers. It records timers for each activity, and when the activity changes it pushes the time to google spreadsheet

int led0 = D0;//led 0
int led1 = D1;//led 1
int led2 = D2;// led 2
int led3 = D7;//led on photon
int button = D3;
int actVar = 0;
long lastpressed = Time.now();
int photoresistor = A0;//photoresistor
int power = A5;
double photoval = 0;
double photopercent;
double photovalinit;
int buzzer = A4;
bool timerstate = false;
int totaltime;
int timerstart;
int bstatepreviousinput;

//sets up buzzer, photresister, led's and button.
void setup() {
    pinMode(led0, OUTPUT);
    pinMode(led1, OUTPUT);
    pinMode(led2, OUTPUT);
    pinMode(led3, OUTPUT);
    pinMode(button, INPUT_PULLUP);
    pinMode(photoresistor, INPUT);
    pinMode(power, OUTPUT);
    pinMode(buzzer, OUTPUT);
    photovalinit = analogRead(photoresistor);
    digitalWrite(power, HIGH);
    Serial.begin(9600);
}

//this function changes the activity
void loop() {
    if(digitalRead(button) == LOW && Time.now()-lastpressed >= 1){
        actVar += 1;
        if(actVar == 8){
            actVar = 0;
            activity(actVar);
        }
        else if(actVar <= 7){
            activity(actVar);
        }
        lastpressed = Time.now();
    }
    photostate(actVar);
    Serial.print(photoval);
    Serial.print("\n");
    delay(1000);
}

//this function implements activity
int activity(int num){
   switch(num) {
       case 0: lights(LOW, LOW, LOW);
                break;
       case 1: lights(HIGH, LOW, LOW);
                break;
        case 2: lights(LOW, HIGH, LOW);
                break;
        case 3: lights(HIGH, HIGH, LOW);
                break;
        case 4: lights(LOW, LOW, HIGH);
                break;
        case 5: lights(HIGH, LOW, HIGH);
                break;
        case 6: lights(LOW, HIGH, HIGH);
                break;
        case 7: lights(HIGH, HIGH, HIGH);
                break;
   }
   
}

//this function implements turning lights on and off
void lights(bool a, bool b, bool c){
    digitalWrite(led0, a);
    digitalWrite(led1, b);
    digitalWrite(led2, c);
}

//this function tracks the timer based on activity
void photostate(int bstateinput){
    if(bstateinput != bstatepreviousinput){
        bstatepreviousinput = bstateinput;
        Particle.publish("timer", String(totaltime), PRIVATE);//publishes the total time
        timerstate = false;
        timerstart = 0;
        totaltime = 0;//resets when activity changes.
        Serial.print("Timer reset\n");
    }
    photoval = analogRead(photoresistor);
    if(photoval<170 && timerstate == false){
        timerstate = true;
        timerstart = millis();
        digitalWrite(led3, HIGH);
        tone(buzzer, 262, 200);
        Serial.print("timer started\n");
    } else if (photoval<170 && timerstate == true){
        timerstate = false;
        digitalWrite(led3, LOW);
        totaltime += (millis()-timerstart)/1000;
        timerstart = 0;
        tone(buzzer, 262, 200);
        Serial.print("timer stopped\n");
        Serial.print(totaltime/1000);
        Serial.print("\n");
    }
}